
---> Core commands: 

  01. terraform init                  -> Downloading and installing any required provider plugins, Moudules. 
      terraform init -upgrade         -> Is a command used in Terraform to upgrade the installed provider plugins to their latest version.
      terraform init -reconfigure     -> Terraform to force a reconfiguration of the backend.
      terraform init -migrate-state   -> Command used in Terraform to migrate the state of the infrastructure from one backend to another.
       
  02. terraform validate              -> To check the syntax and config of a Terraform module or config files, without creating or modifying any resources.
      terraform validate -json        -> To check the syntax and config of a Terraform module or configuration files and output the results in JSON format.
  
  03. terraform plan                  -> To create an execution plan for your infrastructure, based on the current Terraform configuration.    
      terraform plan -out=path        -> To create an execution plan for your infrastructure and save the plan to a file.
  
  04. terraform apply                 -> Creates or updates infrastructure according to Terraform configuration files in the current directory.
      terraform apply --auto-approve  -> Terraform to apply the changes to your infrastructure without prompting for approval.
      terraform apply -parallelism=10 -> Limit the number of parallel resource operations. Defaults to 10.
      terraform apply -refersh-only   -> That can be used to update the state of the Terraform-managed infrastructure without making any changes to it.
      terraform apply -replace=address  -> Force replacement of a particular resource instance using its resource address. 
      terraform apply -target=address -> To creating operation to only the given module, resource, or resource instance and all of its dependencies.
      terraform apply -lock-timeout=10s -> Duration to retry a state lock. 
      
  05. terraform destroy               -> terraform destroy is a command used in Terraform to destroy all resources created by a Terraform configuration.
      terraform apply -destroy        -> To destroy all resources created by a Terraform configuration. alias of terraform apply -destroy 
      
---> Other commands: 

  01. terraform show                 -> The terraform show command is used to display the current state or configuration of a Terraform-managed infrastructure
      terraform show -json           -> If specified, output the Terraform plan or state in a machine-readable form -json
      
  02. terraform state list           -> This command lists all of the resources in the state file.
      terraform state show <address> -> This command shows the attributes of a specific resource in the state file.
      terraform state pull           -> Current state and saves it to a local file.
      terraform state push           -> This command updates the state on the remote backend with the current local state file.
      terraform state rm <address>   -> Remove instances from the state file. 
      terraform state mv <S> <D>     -> Rename or Move to other state file. 
  
  03. terraform import <config_block> <address> -> terraform import is a command in Terraform that allows you to import an existing resource into your Terraform state.
  
  04. terraform output              -> In Terraform that allows you to view the values of output variables defined in your Terraform configuration.
  
  05. terraform get                 -> To download and install any external modules or plugins that are required by your Terraform configuration. 
  
---> More other commands:

  01. terraform providers            -> Command is used to manage and display information about the providers used in a Terraform configuration.
      terraform providers lock       -> The terraform providers command can be used to lock the versions of the providers used in a Terraform configuration.
      
  02. terraform workspace show       -> Show the name of the current workspace
      terraform workspace list       -> List Terraform workspaces 
      terraform workspace new dev    -> To create new workspac and switch to dev workspace
      terraform workspace select dev -> Select give workspace name
      
  03. terraform login                -> The terraform login command is used to authenticate with Terraform Cloud, 
                                        a hosted version of Terraform that provides collaborative infrastructure as code.  
 
---------------------------------------------------------------------------------------

Terraform blocks and its functions:

 01. Terraform Block - In Terraform, a Terraform block is used to define global settings and configurations for a Terraform project.
    
    terraform {
      required_version = "1.4.4"
      backend "local" {
        path = /home/e00049/terraform/dev
      }
      required_providers {
        aws = {
          source = "hashicorp/aws"
          version = "4.62.0"
        }
    }  
    
 02. Provider Block - This block is used to configure a provider, which is a plugin that Terraform uses to interact with a specific cloud provider, 
                      such as AWS, Azure, or Google Cloud Platform. The provider block specifies the provider type, version, and credentials.
    
    provider "aws" {
      version = "~> 4.0"
      region  = "us-east-1"
      profile = "developement"
      alias   = "developement"
    }
  
 03. Data Block   - In Terraform, a data block is used to define a data source, 
                    which is a read-only source of data from an external system that can be used in Terraform configuration.
                    The data block allows you to retrieve information about an existing resource
   
    data "aws_ami" "ubuntu" {
      most_recent = true
      owners      = ["099720109477"] # Canonical
      filter {
        name   = "name"
        values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
      }
      filter {
        name   = "virtualization-type"
        values = ["hvm"]
       }
   }
                                     
04. Module Block  - This block is used to define a module, which is a set of Terraform configurations that can be reused across different projects. 
                    A module block has a source argument that specifies the location of the module's configuration files.                                            

    module "my_vpc" {
      source   = "./modules/vpc"
      vpc_name = custom_vpc_name
    }
    
    module "instance" {
      source = "./modules/instance"
      vpc_id = module.my_vpc.vpc_id
    }
    
 05. Resource Block - This is the most common type of block in Terraform, and it is used to define a single infrastructure resource,
                      such as an AWS EC2 instance or an Azure virtual machine.
                      
    resource "aws_instance" "webserver" {
      ami           = var.type_ami
      instance_type = var.type_instance[0]

      root_block_device {
        volume_size           = var.size_ebs
        delete_on_termination = var.ebs_live
      }

      tags = {
        name      = var.name_tag["name_server"]
        workspace = terraform.workspace
        owner     = var.own_server
      }
    }


06. Output Block    - This block is used to define output values that are generated by Terraform configuration after it is applied. 
                      An output block has a name and a value that is computed from the configuration.
                      
    output "public_ip" {
      value = aws_instance.webserver.public_ip
    }

07. Variable blocks: Variable blocks are used to define input variables that can be used to customize the behavior of a Terraform configuration. 
                     These variables can be used to change the configuration of resources, modules, and providers.
                     
    variable "own_server" {
      description = "own_server"
      type        = string
      default     = "e00049"
    }

---------------------------------------------------------------------------------------

In Terraform, there are several types of variables that can be used to define and configure infrastructure resources. 
Here are some of the most commonly used types of variables: (Source: chatGPT)

01. String: A string variable is a sequence of characters, and it is used to store text values.
    # Example for string type:
    variable "type_ami" {
      description = "machine_type"
      type        = string
      default     = "ami-0db245b76e5c21ca1"
    }
    
02. Number: A number variable is used to store numeric values. Terraform supports integer and floating-point numbers.
    # Example for number type:
    variable "size_ebs" {
      description = "ebs_size"
      type        = number
      default     = 8
    }
    
03. Bool: A boolean variable is used to store true or false values.
    # Example for boolen type:
    variable "ebs_live" {
      description = "ebs_delete"
      type        = bool
      default     = true
    }

04. List: A list variable is used to store an ordered collection of values. The elements in a list can be of any type.
    # Example for List type:
    variable "type_instance" {
      description = "instance_type"
      type        = list(any)
      default     = ["t2.micro", "t3a.medium"]
    }

05. Map: A map variable is used to store a collection of key-value pairs. The keys and values in a map can be of any type.
    # Example for map type:
    variable "name_tag" {
      description = "name_tag"
      type        = map(any)
      default = {
        name_server = "webserver"
        env         = "dev"
      }
    }
    
 ----------------------------------------------------------------
  
 Debbuing:
  TF_LOG=<State> -> TRACE, DEBUG, INFO, WARNING, ERROR.
  TF_VAR_<variable_name>=<value>            
  TF_LOG_PATH=/var/log/terraform.txt
  
Variable order of Precedence:
  01. terraform plan/apply/destroy -var (or) -var-file=/home/e00049/terraform/dev.txt
  02. terraform plan/apply/destroy *.auto.tfvars (or) *.atuo.tfvars.json - files_names
  03. terraform plan/apply/destroy terraform.tfvars.json - file_name
  04. terraform plan/apply/destroy terraform.tfvars - file_name
  05. environment variables TF_VAR_ami_name=ami-12345678
  06. default variable      - from variables block default value.

Meta Arguments:
  01. provider
  02. count 
  03. for_each
  04. locals 
  05. alias 
  06. dynamic

-------------------------------------------------------------------------------------------------------- 
  
  P.S: Some of contents form chatGPT.
